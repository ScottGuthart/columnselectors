{"version":3,"sources":["getSelectedValues.js","components/FileUploader.js","components/ColumnReceiverSelect.js","components/ColumnReceiverButton.js","components/ColumnReceiver.js","components/ColumnSender.js","components/DataFileForm.js","dataFileFormItems.js","App.js","serviceWorker.js","index.js"],"names":["getSelectedValues","element","options","selectedOptions","Array","from","selectedValues","map","o","push","parseInt","value","FileUploader","props","Form","Group","as","Row","className","Col","sm","File","label","name","custom","accept","formats","onChange","ColumnReceiverSelect","disabled","columns","length","Control","size","multiple","filter","column","selected","htmlSize","col","i","key","ColumnReceiverButton","buttonAction","Button","variant","onClick","handleClick","style","position","bottom","ColumnReceiver","Label","justifyContent","handleReceiverButtonClick","ColumnSender","consumed","DataFileForm","useState","undefined","dataFile","setDataFile","setColumns","activeSelect","setActiveSelect","useEffect","selectedColumns","location","console","log","fetch","method","body","then","res","json","data","catch","error","columnReceivers","handleColumnSelectChange","event","target","prevColumns","includes","useCallback","receiverID","newLocation","file","files","reduce","n","columnReceiver","id","dataFileFormItems","App","bsCustomFileInput","init","dataFileForms","dataFileFormInfo","Container","maxWidth","Tabs","defaultActiveKey","Tab","eventKey","title","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.5d8f3498.chunk.js","sourcesContent":["\n  const getSelectedValues = (element) => {\n    let options = element.selectedOptions\n    options = Array.from(options)\n    let selectedValues = []\n    options.map(o=>{\n      selectedValues.push(parseInt(o.value))\n      return true\n   })\n   return selectedValues\n  }\n\n  export default getSelectedValues","import React from \"react\"\nimport { Form, Row, Col } from \"react-bootstrap\"\n\nconst FileUploader = (props) => {\n  return (\n        <Form.Group as={Row} className=\"mb-5\">\n          <Col sm={6}>\n            <Form.File\n              label={`Select ${props.name}`}\n              custom\n              accept={props.formats}\n              onChange={props.onChange}\n            />\n          </Col>\n        </Form.Group>\n  )\n}\n\nexport default FileUploader","import React from \"react\"\nimport { Form } from \"react-bootstrap\"\n\nconst ColumnReceiverSelect = (props) => {\n    const disabled = props.columns.length === 0\n    return (\n          <Form.Control\n          onChange={props.onChange}\n          size=\"sm\"\n          as=\"select\"\n          multiple={true}\n          value={props.columns\n                 .filter(column=>column.selected)\n                 .map(column=>column.value)\n          }\n          htmlSize={props.size}\n          disabled={disabled}\n          custom\n          >\n            {\n              props.columns\n              .map((col, i)=>(\n                <option key={col.value} value={col.value}>\n                  {col.name}\n                </option>\n              ))\n            }\n          </Form.Control>\n    )\n}\nexport default ColumnReceiverSelect","import React from \"react\"\nimport { Button } from 'react-bootstrap'\nimport { BsChevronDoubleLeft,BsChevronDoubleRight, BsDash } from \"react-icons/bs\"\n\nconst ColumnReceiverButton = (props) => {\n  if (props.buttonAction === 'arrive') {\n    return (\n      <Button\n        size=\"\"\n        className=\"text-nowrap\"\n        variant=\"primary\"\n        onClick={props.handleClick}\n      >\n          <BsChevronDoubleRight size=\"1.0rem\"\n          style={{position:\"relative\", bottom:\"1px\"}}\n          />\n            &nbsp;{props.name}&nbsp;\n          <BsChevronDoubleRight size=\"1.0rem\"\n          style={{position:\"relative\", bottom:\"1px\"}}\n          />\n      </Button>\n    )\n  }\n  else if (props.buttonAction === \"depart\") {\n    return (\n      <Button\n        size=\"\"\n        className=\"text-nowrap\"\n        variant=\"primary\"\n        onClick={props.handleClick}\n      >\n          <BsChevronDoubleLeft size=\"1.0rem\"\n          style={{position:\"relative\", bottom:\"1px\"}}\n          />\n            &nbsp;{props.name}&nbsp;\n          <BsChevronDoubleLeft size=\"1.0rem\"\n          style={{position:\"relative\", bottom:\"1px\"}}\n          />\n      </Button>\n    )\n  }\n  return (\n      <Button\n        size=\"\"\n        className=\"text-nowrap disabled\"\n        disabled={true}\n        variant=\"secondary\"\n        onClick={props.handleClick}\n      >\n          <BsDash size=\"1.0rem\"\n          style={{position:\"relative\", bottom:\"1px\"}}\n          />\n            &nbsp;{props.name}&nbsp;\n          <BsDash size=\"1.0rem\"\n          style={{position:\"relative\", bottom:\"1px\"}}\n          />\n      </Button>\n\n  )\n}\n\nexport default ColumnReceiverButton","import React from \"react\"\nimport { Form, Row, Col, } from \"react-bootstrap\"\n\nimport ColumnReceiverSelect from \"./ColumnReceiverSelect\"\nimport ColumnReceiverButton from \"./ColumnReceiverButton\"\nimport \"./ColumnReceiver.css\"\n\nconst ColumnReceiver = (props) => {\n  return (\n    <Row className=\"ColumnReceiver\">\n      <Form.Label as={Col} sm={5} \n        className='d-flex align-items-center p-0'\n        style={{justifyContent: \"center\"}}\n      >\n      <ColumnReceiverButton \n       name={props.name}\n       handleClick={props.handleReceiverButtonClick}\n       buttonAction={props.buttonAction}\n      />\n      </Form.Label>\n      <Col sm={7} className=\"pt-1 pb-1\">\n       <ColumnReceiverSelect\n        size={props.size}\n        columns={props.columns}\n        onChange={props.onChange}\n       /> \n      </Col>\n    </Row>\n  )\n}\n\nexport default ColumnReceiver","import React from \"react\"\nimport { Form } from \"react-bootstrap\"\n\nconst ColumnSender = (props) => {\n  const disabled = props.columns.length <= 1\n  return (\n            <Form.Control\n             size=\"sm\"\n             as=\"select\"\n             multiple={true}\n             htmlSize={props.htmlSize}\n             onChange={props.onChange}\n            //  onFocus={props.onFocus}\n             value={props.columns\n              .filter(column=>column.selected)\n              .map(column=>column.value)\n             }\n             disabled={disabled}\n             custom\n            >\n              {\n                props.columns\n                .filter(col=>!col.consumed)\n                .map((col, i)=>(\n                  <option key={col.value} value={col.value}>\n                    {col.name}\n                  </option>\n                ))\n              }\n            </Form.Control>\n  )\n}\n\nexport default ColumnSender","import React, {useEffect, useState, useCallback} from \"react\"\nimport { Row, Col } from 'react-bootstrap'\n\nimport getSelectedValues from \"../getSelectedValues\"\nimport FileUploader from \"./FileUploader\"\nimport ColumnReceiver from \"./ColumnReceiver\"\nimport ColumnSender from \"./ColumnSender\"\n\nconst DataFileForm = (props) => {\n  const [dataFile, setDataFile] = useState(undefined)\n  const [columns, setColumns] = useState([])\n\n  const [activeSelect, setActiveSelect] = useState(null);\n  \n  const getButtonAction = (receiverID) => {\n    console.log(`getButtonAction ${receiverID}`)\n    if (activeSelect !== undefined) {\n      if(activeSelect === receiverID) {\n        return \"depart\"\n      }\n      return \"arrive\"\n    }\n    return \"none\"\n  }\n \n  useEffect(()=>{\n    setActiveSelect(()=>{\n      const selectedColumns = columns.filter(column=>column.selected)\n      if (typeof(selectedColumns) === \"object\"\n          && selectedColumns.length > 0)\n      {\n        return selectedColumns[0].location\n      }\n      return undefined\n      \n    })\n  },[columns])\n\n  useEffect(() => {\n    console.log('useEffect: File Change')\n    if(dataFile !== undefined){\n      console.log(`Filename: ${dataFile.name}`)\n      setColumns([\"Loading...\"])\n      const requestOptions = {\n        method: 'POST',\n        body: dataFile,\n      }\n      fetch('/api/columns', requestOptions)\n      .then(res => res.json())\n      .then(data => {\n        console.log(\"Column Data Received\")\n        console.log(data)\n        setColumns(data.map((column, i)=> {\n          return {\n            name: column, \n            location:null,\n            selected:false, \n            value:i,\n          }\n        }))\n      })\n      .catch(error => {\n        console.log(error)\n      })\n    }\n    else {\n      setColumns([])\n    }\n  }, [dataFile]);\n\n  const handleColumnSelectChange = (event) => {\n    const selectedValues = getSelectedValues(event.target)\n    console.log(selectedValues)\n    setColumns((prevColumns) => {\n      const newColumns = prevColumns.map((column, i)=>{\n        return (\n          {\n            ...column,\n            selected: selectedValues.includes(i),\n          }\n          )\n        })\n        return newColumns\n      })\n  }\n\n  const handleFileUpload = (event) => {\n    const file = event.target.files[0]\n    setDataFile(file)\n  }\n\n  const calculateSenderSize = (columnReceivers) => {\n    const sumOfReceiverSizes = columnReceivers\n                              .reduce((n, {size}) => n + size, 0)\n\n    const senderSize = sumOfReceiverSizes + 7\n\n    return senderSize\n  }\n\n  const handleReceiverButtonClick = useCallback((receiverID) => {\n    console.log(`handleButton ${receiverID}`)\n    setColumns((prevColumns)=> {\n      const selectedColumns = prevColumns.filter(column=>column.selected)\n      return (\n        prevColumns.map((column)=>{\n          let newLocation\n          if(selectedColumns.includes(column)) {\n            if (column.location === receiverID) {\n              newLocation = null\n            }\n            else {\n              newLocation = receiverID\n            }\n          }\n          else {\n            newLocation = column.location\n          }\n          return (\n            {\n              ...column,\n              location: newLocation\n            }\n          )\n        })\n      )\n    })\n  },[])\n\n  return (\n      <>\n      <h3 className=\"mt-3 mb-3\">{props.name}</h3>\n        <FileUploader\n          name={props.name}\n          formats={props.formats}\n          onChange={handleFileUpload}\n        />\n        <Row className=\"ml-0 d-flex align-items-center\">\n          <Col sm={4} className=\"pl-0\">\n              <ColumnSender\n               onChange={handleColumnSelectChange}\n               columns={\n                 columns\n                 .filter(column=>column.location==null)\n               } \n               htmlSize={\n                 calculateSenderSize(props.columnReceivers)\n                }\n              />\n          </Col>\n          <Col sm={8}>\n            {props.columnReceivers.map((columnReceiver, i) => {\n              return (\n                <ColumnReceiver\n                 name={columnReceiver.name}\n                 size={columnReceiver.size}\n                 id={columnReceiver.id}\n                 key={i}\n                  columns={\n                    columns\n                    .filter(column=>column.location === columnReceiver.id)\n                  }\n                 buttonAction={getButtonAction(columnReceiver.id)}\n                 handleReceiverButtonClick={(event)=>{\n                   handleReceiverButtonClick(i, event)\n                  }\n                 }\n                 onChange={handleColumnSelectChange}\n                />\n              )\n            })}\n          </Col>\n        </Row>\n      </>\n  )\n}\n\n\nexport default DataFileForm","const dataFileFormItems = [\n  {\n    name: \"Excel File\",\n    id: 0,\n    formats: \".csv, .xlsx, .xls, .sav\",\n    columnReceivers: [\n                  {\n                    name: \"Group 1\",\n                    id: 0,\n                    size: 1,\n                  },\n                  {\n                    name: \"Group 2\",\n                    id: 1,\n                    size: 5,\n                  },\n                  {\n                    name: \"Group 3\",\n                    id: 2,\n                    size: 5,\n                  },\n                  {\n                    name: \"Group 4\",\n                    id: 3,\n                    size: 5,\n                  },\n                  {\n                    name: \"Group 5\",\n                    id: 4,\n                    size: 5,\n                  },\n    ]\n  },\n]\n\nexport default dataFileFormItems","import React, { useEffect } from 'react';\nimport './App.css';\nimport { Form, Container, Tabs, Tab, } from 'react-bootstrap'\nimport bsCustomFileInput from \"bs-custom-file-input\"\n\nimport DataFileForm from \"./components/DataFileForm\"\nimport dataFileFormItems from \"./dataFileFormItems\"\n\n\nfunction App() {\n  useEffect(() => {\n    console.log('useEffect: Page Load')\n    bsCustomFileInput.init();\n  }, []);\n\n\n  const dataFileForms = dataFileFormItems.map(dataFileFormInfo=>{\n      return (\n        <DataFileForm \n          name={dataFileFormInfo.name}\n          formats= {dataFileFormInfo.formats}\n          columnReceivers={dataFileFormInfo.columnReceivers}\n        />\n      )\n    })\n\n  return (\n    <Container className=\"p-3   mt-5\" style={{maxWidth: \"900px\"}}>\n      <h1 className=\"mb-5\">Column Selector Demo</h1>\n      <Tabs variant=\"tabs\" defaultActiveKey=\"upload\">\n        <Tab eventKey=\"upload\" title=\"Upload\">\n          <p className=\"pt-3\">\n            <Form >\n              {dataFileForms}\n            </Form>\n          </p>\n        </Tab>\n      </Tabs>\n    </Container>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n// Importing the Bootstrap CSS\n// import 'bootstrap/dist/css/bootstrap.min.css';  \nimport './custom.scss';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}